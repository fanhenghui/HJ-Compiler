HJ语言定义

支持的变量类型：int float 变量声明格式 type ID (,ID)* 变量可以一次性声明多个
支持常量const 常量声明格式 const type ID = Expression 常量声明同时必须赋值初始化

支持的运算：
	1. (二元运算)优先级1: = 优先级2: & | 优先级3: < <= > >= == != == 优先级4: + - 优先级5: * / 
	2. (一元运算）! 一元运算符比二元运算符优先级高
函数定义 func <函数名> (<参数列表>)[<返回类型>]{<语句块>} 注:非void函数的语句块中至少有一个return
if语句定义 if(<条件>){<语句块>} [else {<语句块>}] 注:只能有一个else ,不支持 else if
while语句定义 while(<表达式>){<语句块>}
for语句定义 for(<表达式1>,<表达式2>,<表达式3>){<语句块>} 

原子表达式:= 字面值|变量常量的使用|函数调用|括号表达式    注:括号表达式:= ‘(‘ 表达式 ‘)’
表达式:=原子表达式 与 一元运算 二元运算的组合 注:表达式与if while for语句的重要区别是表达式可以计算出值
语句:= 表达式|if while for 语句|return|break|continue|常量变量声明
语句块:= 语句块序列

语言的其他性质:
没有类型自动转换,类型要求严格匹配,但是表达式计算时 有float类型则整个表达式都是float否则是int
不支持函数内再声明定义函数
函数的声明与定义只能在文件的开始处,main函数的上方
变量随便哪里都可以声明,有作用域,作用域内变量不能重名,但是可以和域外的变量重名,域=一个语句块
自带的系统函数: inputFloat inputInt print to_float to_int
HJ语言的典型文件结构:
————文件开始————
常量声明 全局变量声明 
函数声明 函数定义
main函数{
语句块
}
————文件结束————

HJ语言代码示例:
const int x= 100*2
float i,j
func add(float ii,float jj)float{
	return ii+jj
}
func main(){
	
	i=1.0
	j=2.0
	print(add(i,j)) #print是系统自带函数
	print(add(i,to_float(x))) #to_float是系统自带函数
	if(i==1.0){
		print(“i的值是1.0啊!”)
	}
	int test #在这里声明变量也是可以的!
}
#End of File

